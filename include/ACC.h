#ifndef _ACC_H_INCLUDED
#define _ACC_H_INCLUDED

#include "ACDC.h"
#include "stdUSB.h"


using namespace std;

//These CC and ACDC buffer-sizes are inputs to a hard-coded
//wait statement in the stdUSB class during read and write operations.
//I am often re-tuning them to change the readout rate. A known
//issue exists where buffers returned by the ACC and ACDC are not
//always the size as expected from properly operating firmware or usb system. 
//Hence why these buffer-sizes are inflated so that calloc'ed memory is not
//written past its allocation. 
#define NUM_CH 30
#define CC_BUFFERSIZE 100 //will only be 64 if all goes as expected from firmware
#define ACDC_BUFFERSIZE 18000 //will only be 16002 if all goes as expected from firmware
#define SAFE_BUFFERSIZE 100000
#define MAX_NUM_BOARDS 8
#define CALIBRATION_DIRECTORY "./autogenerated_calibrations/"
#define PED_TAG "PEDS_ACDC"
#define LIN_TAG "LUT_ACDC"

class ACC
{
public:

	ACC();
	~ACC(); 

	//----------parsing functions (no usb comms)
	vector<int> getAlignedIndices(){return alignedAcdcIndices;} //returns vector of aligned acdc indices
	string getCalDirectory(){return CALIBRATION_DIRECTORY;}
	string getPedTag(){return PED_TAG;}
	string getLinTag(){return LIN_TAG;}
	//-----------functions that involve usb comms
	//(see cpp declaration for more comments above functions)
	int createAcdcs(); //creates ACDC objects, explicitly querying both buffers
	void setSoftwareTrigger(vector<int> boards = {}); //prepares software trigger and sets on acc/acdc
	void softwareTrigger(); //sends the software trigger
	void enableTransfer(int onoff=0);
	void toggleCal(int onoff, unsigned int channelmask = 0x7FFF); //toggles calibration input switch on boards
	int readAcdcBuffers(bool raw = false, string timestamp ="invalidTime"); //reads the acdc buffers
	int listenForAcdcData(int trigMode, bool raw = false, string timestamp="invalidTime"); //almost identical to readAcdcBuffers but intended for real data triggering
	int initializeForDataReadout(int trigMode = 0,unsigned int boardMask = 0xFF, int calibMode = 0);
	void dumpData(); //tells ACDCs to clear their ram
	bool setPedestals(unsigned int ped, vector<int> boards = {});
  	void emptyUsbLine(); //attempting to remove the crashes due to non-empty USB lines at startup.
	void writeErrorLog(string errorMsg);
	void writePsecData(ofstream& d, vector<int> boardsReadyForRead); 
	void writeRawDataToFile(vector<unsigned short> buffer, string rawfn);
	//-----short usb send functions. found
	//-----at the end of the cpp file. 
	void setHardwareTrigSrc(int src, unsigned int boardMask = 0xFF); 
	//--reset functions
	void usbWakeup(); //40EFF;
	void resetACDCs(); //4F000;
	stdUSB* getUsbStream(); //returns the private usb object

	//Set functions for trigger
	void setDetectionMode(int in, int source)
	{
		if(source==2)
		{
			ACC_detection_mode = in;
		}else if(source==3)
		{
			ACDC_detection_mode = in;
		}else if(source==4)
		{
			SELF_detection_mode = in;
		}
	}
	
	void setSign(int in, int source)
	{
		if(source==0)
		{
			ACC_sign = in;
		}else if(source==1)
		{
			ACDC_sign = in;
		}else if(source==2)
		{
			SELF_sign = in;
		}
	}
	
	void setNumChCoin(unsigned int in){SELF_number_channel_coincidence = in;}	
	
	void setEnableCoin(int in){SELF_coincidence_onoff = in;}
	
	void setThreshold(unsigned int in){SELF_threshold = in;}
	
	void setPsecChipMask(vector<unsigned int> in){SELF_psec_channel_mask = in;}
	void setPsecChannelMask(vector<unsigned int> in){SELF_psec_chip_mask = in;}

	void setValidationWindow(unsigned int in){validation_window=in;}
	
	void setTriggermode(int in){trigMode = in;}
	int getTriggermode(){return trigMode;}
	
	map<int, map<int, vector<double>>> returnData(){return map_data;}
	map<int, map<string, unsigned short>> returnMeta(){return map_meta;}


private:
	stdUSB* usb;
	Metadata meta;
	vector<unsigned short> lastAccBuffer; //most recently received ACC buffer
	vector<int> alignedAcdcIndices; //number relative to ACC index (RJ45 port)
	vector<ACDC*> acdcs; //a vector of active acdc boards. 
	int ACC_detection_mode;
	int ACC_sign;
	int ACDC_detection_mode;
	int ACDC_sign;
	int SELF_detection_mode;
	int SELF_sign;
	int SELF_coincidence_onoff;
	int trigMode;
	vector<unsigned int> SELF_psec_channel_mask;
	vector<unsigned int> SELF_psec_chip_mask;
	unsigned int SELF_number_channel_coincidence;
	unsigned int SELF_threshold;
	unsigned int validation_window;
	map<int, map<int, vector<double>>> map_data;
	map<int, map<string, unsigned short>> map_meta;

	//-----------functions that involve usb comms
	vector<unsigned short> readAccBuffer();

	//-----------parsing functions (no usb comms)
	vector<int> whichAcdcsConnected();
	vector<unsigned short> sendAndRead(unsigned int command, int buffsize); //wakes the usb line, only called in constructor. 
	bool checkUSB(); //checking usb line and returning or couting appropriately.  
	void clearAcdcs(); //memory deallocation for acdc vector. 
	int parsePedsAndConversions(); //puts ped and LUT-scan data into ACDC objects

	static void got_signal(int);
};

#endif
